More comments: add to the README maybe.

Human beings have three dimensions. The somatic, the psychic and the espiritual. Each of them is "superior" than the former, in that order. At the same time, some times there's not a clear distinction between them, as there are complex interactions. The "superior" dimensions, cancel and at the same time incorporate the once below.

This principle could be applied for software. That is translated to a somewhat "coupled stratified design".

In the dataflow world, callbacks (weak lambdas) are the inferior. The dataflow syntax is superior. But dataflow syntax should somehow "include" the weak lambdas. As a consecuence, weak lambdas, or even, simple lambdas, could be used in the same places that the full dataflow syntax is used.

Other design:

wlambdas make the algorithm for dataflow too coupled. The algorithm is embedded in the wlambda construction. That does not permit separating the dependecies from the algorithms for resolving them. In particular, we may want to have different policies or a transactional algorithm.

In the current design, this is what happens:

(let
   ((a (make-cell :value 21))
    (b (make-cell :value 11)))
  (df (+ a b)))

That would get transformed to something like:

(let
    ((a (make-cell :value 21))
     (b (make-cell :value 11)))
  (make-cell :lambda
	      (lambda ()
		(block cell-lambda#1
		       (let ((weak-ref#1 (make-weak-ref a))
			     (weak-ref#2 (make-weak-ref b)))
			 (when (or (null-weak-ref weak-ref#1)
				   (null-weak-ref weak-ref#2))
			   (return-from cell-lambda#1)))
		       (symbol-macrolet
			   ((a (value

An alternative design should provide the means to implement different resolving algorithms:

(let
   ((a (make-cell :value 21))
    (b (make-cell :value 11)))
  (df (+ a b)))

Should get translated to:

(make-cell :lambda (lambda (a b)
		     (symbol-macrolet
			 ((a `(value a))
			  (b `(value b)))
		       (+ a b)))
	    :args (list a b))

make-cell builds a cell. Each cell holds the lambda to compute and a weak hash table to the dataflow variables. Now the cell holds the dependencies only, and doesn't know about the algorithm to resolve them.

The (setf (value cell) value) could register the changes in the current memory transaction in a transactional dataflow resolving scheme.

The cell computes itself providing its weakly referenced arguments to its lambda.
